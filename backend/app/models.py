"""
VeritabanÄ± modelleri
"""
from sqlalchemy import Column, Integer, String, Text, ForeignKey, DateTime, Boolean, Float, JSON
from sqlalchemy.orm import relationship
from datetime import datetime
from .database import Base

class Contract(Base):
    """Ä°lan bilgileri - 1. AdÄ±m"""
    __tablename__ = "contracts"
    
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String(500), nullable=False)
    content = Column(Text, nullable=False)  # Ä°lan metni
    general_requirements = Column(Text)  # Genel ÅŸartlar
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Ä°liÅŸkiler
    roles = relationship("Role", back_populates="contract")

class Role(Base):
    """Roller ve gereksinimler - 2. AdÄ±m"""
    __tablename__ = "roles"
    
    id = Column(Integer, primary_key=True, index=True)
    contract_id = Column(Integer, ForeignKey("contracts.id"))
    name = Column(String, index=True)
    salary_multiplier = Column(Float)
    position_count = Column(Integer)
    requirements = Column(Text)
    
    contract = relationship("Contract", back_populates="roles")
    question_configs = relationship("RoleQuestionConfig", back_populates="role")

    @property
    def difficulty_level(self):
        """MaaÅŸ katsayÄ±sÄ±na gÃ¶re zorluk seviyesi belirle - 5 KatmanlÄ± Model"""
        if self.salary_multiplier <= 2:
            return {
                "level": "temel",
                "name": "ðŸŸ¢ ORTA DÃœZEY UZMAN (2x)",
                "description": "2-4 yÄ±l tecrÃ¼be - GÃ¼nlÃ¼k operasyonu eksiksiz yÃ¼rÃ¼tme, temel optimizasyon",
                "experience_years": "2-4 yÄ±l",
                "focus": "Ä°ÅŸe hazÄ±r teknik beceri, temel araÃ§lar ve Ã§erÃ§evelerde yetkinlik",
                "katman_dagilimi": {
                    "K1_Temel_Bilgi": 30,      # TanÄ±m, sÃ¶zdizimi, kavram
                    "K2_Uygulamali": 40,        # KÃ¼Ã§Ã¼k kod-konfig yazma, CLI komutu
                    "K3_Hata_Cozumleme": 25,    # GerÃ§ek log/kod verip sorun bulma
                    "K4_Tasarim": 5,            # Komponent diyagramÄ±, basit mimari
                    "K5_Stratejik": 0           # Trade-off analizi, roadmap
                },
                "bloom_seviyesi": "Remember/Apply",
                "dreyfus_seviyesi": "Novice/Advanced Beginner"
            }
        elif self.salary_multiplier <= 3:
            return {
                "level": "orta", 
                "name": "ðŸŸ¡ KIDEMLI UZMAN (3x)",
                "description": "5-8 yÄ±l tecrÃ¼be - Ã‡apraz disiplinde hÃ¢kimiyet, mentorluk, kritik problem Ã§Ã¶zÃ¼mÃ¼",
                "experience_years": "5-8 yÄ±l",
                "focus": "TasarÄ±m kalÄ±plarÄ±, mimari kararlar, performans optimizasyonu, mentorluk",
                "katman_dagilimi": {
                    "K1_Temel_Bilgi": 15,      # Temel kavramlar
                    "K2_Uygulamali": 25,        # GeliÅŸmiÅŸ uygulama
                    "K3_Hata_Cozumleme": 35,    # Kritik problem Ã§Ã¶zÃ¼mÃ¼
                    "K4_Tasarim": 20,           # Mimari tasarÄ±m, best-practice
                    "K5_Stratejik": 5           # Stratejik kararlar
                },
                "bloom_seviyesi": "Analyze/Evaluate",
                "dreyfus_seviyesi": "Competent/Proficient"
            }
        elif self.salary_multiplier <= 4:
            return {
                "level": "ileri",
                "name": "ðŸŸ  MÄ°MAR/TEKNÄ°K LÄ°DER (4x)", 
                "description": "8-10 yÄ±l tecrÃ¼be - Strateji, bÃ¼yÃ¼k Ã¶lÃ§ekli mimari, metodoloji, ekip & sÃ¼reÃ§ yÃ¶netimi",
                "experience_years": "8-10 yÄ±l", 
                "focus": "Sistem mimarisi, scalability, gÃ¼venlik, team leadership, stratejik planlama",
                "katman_dagilimi": {
                    "K1_Temel_Bilgi": 5,       # Minimal temel
                    "K2_Uygulamali": 15,        # Ä°leri uygulama
                    "K3_Hata_Cozumleme": 25,    # Kompleks problem Ã§Ã¶zÃ¼mÃ¼
                    "K4_Tasarim": 35,           # BÃ¼yÃ¼k Ã¶lÃ§ekli mimari tasarÄ±m
                    "K5_Stratejik": 20          # Stratejik kararlar, roadmap
                },
                "bloom_seviyesi": "Evaluate/Create",
                "dreyfus_seviyesi": "Proficient/Expert"
            }
        else:  # 5x ve Ã¼zeri
            return {
                "level": "uzman",
                "name": "ðŸ”´ ENTERPRISE UZMAN (5x+)",
                "description": "10+ yÄ±l tecrÃ¼be - Enterprise mimari, strategik kararlar, teknoloji liderliÄŸi, global Ã¶lÃ§ek",
                "experience_years": "10+ yÄ±l",
                "focus": "Enterprise architecture, strategic decisions, innovation, global governance",
                "katman_dagilimi": {
                    "K1_Temel_Bilgi": 0,       # Minimal
                    "K2_Uygulamali": 10,        # Stratejik uygulama
                    "K3_Hata_Cozumleme": 20,    # Enterprise problem Ã§Ã¶zÃ¼mÃ¼
                    "K4_Tasarim": 30,           # Enterprise mimari tasarÄ±m
                    "K5_Stratejik": 40          # Stratejik liderlik, roadmap
                },
                "bloom_seviyesi": "Create",
                "dreyfus_seviyesi": "Expert"
            }

    @property 
    def question_difficulty_distribution(self):
        """Zorluk seviyesine gÃ¶re soru daÄŸÄ±lÄ±mÄ± - 5 KatmanlÄ± Model"""
        difficulty = self.difficulty_level
        
        if difficulty["level"] == "temel":  # 2x
            return {
                "K1_Temel_Bilgi": 30,      # TanÄ±m, sÃ¶zdizimi, kavram
                "K2_Uygulamali": 40,        # KÃ¼Ã§Ã¼k kod-konfig yazma, CLI komutu
                "K3_Hata_Cozumleme": 25,    # GerÃ§ek log/kod verip sorun bulma
                "K4_Tasarim": 5,            # Komponent diyagramÄ±, basit mimari
                "K5_Stratejik": 0           # Trade-off analizi, roadmap
            }
        elif difficulty["level"] == "orta":  # 3x
            return {
                "K1_Temel_Bilgi": 15,      # Temel kavramlar
                "K2_Uygulamali": 25,        # GeliÅŸmiÅŸ uygulama
                "K3_Hata_Cozumleme": 35,    # Kritik problem Ã§Ã¶zÃ¼mÃ¼
                "K4_Tasarim": 20,           # Mimari tasarÄ±m, best-practice
                "K5_Stratejik": 5           # Stratejik kararlar
            }
        elif difficulty["level"] == "ileri":  # 4x
            return {
                "K1_Temel_Bilgi": 5,       # Minimal temel
                "K2_Uygulamali": 15,        # Ä°leri uygulama
                "K3_Hata_Cozumleme": 25,    # Kompleks problem Ã§Ã¶zÃ¼mÃ¼
                "K4_Tasarim": 35,           # BÃ¼yÃ¼k Ã¶lÃ§ekli mimari tasarÄ±m
                "K5_Stratejik": 20          # Stratejik kararlar, roadmap
            }
        else:  # uzman (5x+)
            return {
                "K1_Temel_Bilgi": 0,       # Minimal
                "K2_Uygulamali": 10,        # Stratejik uygulama
                "K3_Hata_Cozumleme": 20,    # Enterprise problem Ã§Ã¶zÃ¼mÃ¼
                "K4_Tasarim": 30,           # Enterprise mimari tasarÄ±m
                "K5_Stratejik": 40          # Stratejik liderlik, roadmap
            }

class QuestionType(Base):
    """Soru tipleri (dinamik) - 3. AdÄ±m"""
    __tablename__ = "question_types"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), nullable=False)  # "Mesleki TecrÃ¼be SorularÄ±"
    description = Column(Text)  # "AdayÄ±n deneyim ve projelerini deÄŸerlendiren sorular"
    code = Column(String(50), unique=True, nullable=False)  # "professional_experience"
    order_index = Column(Integer, default=0)  # GÃ¶sterim sÄ±rasÄ±
    is_active = Column(Boolean, default=True)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Ä°liÅŸkiler
    question_configs = relationship("RoleQuestionConfig", back_populates="question_type")

class RoleQuestionConfig(Base):
    """Her rol iÃ§in soru tipleri ve sayÄ±larÄ± - 3. AdÄ±m (Rolle bazlÄ±)"""
    __tablename__ = "role_question_configs"
    
    id = Column(Integer, primary_key=True, index=True)
    role_id = Column(Integer, ForeignKey("roles.id"))
    question_type_id = Column(Integer, ForeignKey("question_types.id"))
    
    # Soru sayÄ±sÄ± (her rol + soru tipi kombinasyonu iÃ§in)
    question_count = Column(Integer, default=5)
    
    # Role Ã¶zgÃ¼ zorluk seviyesi
    difficulty_level = Column(String(50), default="Orta")  # Kolay, Orta, Zor
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Ä°liÅŸkiler
    role = relationship("Role", back_populates="question_configs")
    question_type = relationship("QuestionType", back_populates="question_configs")

class QuestionConfig(Base):
    """Global sÄ±nav ve soru konfigÃ¼rasyonu - 3. ve 4. AdÄ±m"""
    __tablename__ = "question_configs"
    
    id = Column(Integer, primary_key=True, index=True)
    contract_id = Column(Integer, ForeignKey("contracts.id"))
    
    # Global sÄ±nav ayarlarÄ± - 3. AdÄ±m
    candidate_multiplier = Column(Integer, default=10)  # Her pozisyon iÃ§in kaÃ§ aday Ã§aÄŸÄ±rÄ±lacak
    questions_per_candidate = Column(Integer, default=5)  # Her adaya kaÃ§ soru sorulacak
    
    # Soru tÃ¼rÃ¼ daÄŸÄ±lÄ±mÄ± (JSON formatÄ±nda - dinamik)
    question_type_distribution = Column(JSON, default=lambda: {
        "professional_experience": 1,
        "theoretical_knowledge": 2, 
        "practical_application": 2
    })  # Her soru tipi iÃ§in aday baÅŸÄ±na soru sayÄ±sÄ±
    
    # LLM ayarlarÄ± - 4. AdÄ±m
    llm_model = Column(String(100), default="gpt-4o-mini")  # OpenAI GPT-4o-mini model
    generation_status = Column(String(50), default="pending")  # pending, generating, completed, failed
    
    # Sistem bilgileri
    focus_areas = Column(Text)  # JSON formatÄ±nda odak alanlarÄ±
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class ContractData(Base):
    """Ä°lan verilerinin JSON formatÄ±nda saklanmasÄ± - 4. AdÄ±m"""
    __tablename__ = "contract_data"
    
    id = Column(Integer, primary_key=True, index=True)
    contract_id = Column(Integer, ForeignKey("contracts.id"))
    parsed_data = Column(Text, nullable=False)  # JSON formatÄ±nda ayrÄ±ÅŸtÄ±rÄ±lmÄ±ÅŸ veri
    created_at = Column(DateTime, default=datetime.utcnow)

class Question(Base):
    """OluÅŸturulan sorular - 5. AdÄ±m (GÃ¼ncellenmiÅŸ)"""
    __tablename__ = "questions"
    
    id = Column(Integer, primary_key=True, index=True)
    role_id = Column(Integer, ForeignKey("roles.id"))  # Hangi role ait
    contract_id = Column(Integer, ForeignKey("contracts.id"))
    
    # Soru bilgileri
    question_text = Column(Text, nullable=False)
    question_type = Column(String(100), nullable=False)  # professional_experience, theoretical_knowledge, practical_application
    difficulty = Column(String(50))  # kolay, orta, zor
    
    # API'den gelen ek bilgiler
    expected_answer = Column(Text)  # Beklenen cevap rehberi
    scoring_criteria = Column(Text)  # DeÄŸerlendirme kriterleri
    
    # Metadata
    llm_model = Column(String(100))  # KullanÄ±lan LLM modeli
    generation_metadata = Column(JSON)  # Ãœretim metadata'sÄ±
    
    created_at = Column(DateTime, default=datetime.utcnow)

class SystemInfo(Base):
    """Sistem bilgileri ve GPU durumu"""
    __tablename__ = "system_info"
    
    id = Column(Integer, primary_key=True, index=True)
    
    # GPU bilgileri
    cuda_available = Column(Boolean, default=False)
    gpu_count = Column(Integer, default=0)
    gpu_name = Column(String(255))
    gpu_memory_gb = Column(Float)
    allocated_memory_gb = Column(Float)
    
    # API bilgileri
    api_available = Column(Boolean, default=False)
    available_models = Column(JSON)  # Mevcut modeller
    
    # Sistem bilgileri
    python_version = Column(String(100))
    platform = Column(String(100))
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class GenerationLog(Base):
    """Soru Ã¼retim loglarÄ±"""
    __tablename__ = "generation_logs"
    
    id = Column(Integer, primary_key=True, index=True)
    contract_id = Column(Integer, ForeignKey("contracts.id"))
    role_id = Column(Integer, ForeignKey("roles.id"))  # Hangi role ait
    
    # Ãœretim bilgileri
    model_name = Column(String(100))
    prompt_length = Column(Integer)
    response_length = Column(Integer)
    generation_time = Column(Float)  # Saniye
    
    # Durum
    status = Column(String(50))  # success, failed, partial
    error_message = Column(Text)
    
    # Raw data
    raw_prompt = Column(Text)
    raw_response = Column(Text)
    
    created_at = Column(DateTime, default=datetime.utcnow) 